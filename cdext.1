.\" @(#)cdext.1
.\" 
.TH "cdext" "1" "1.2.2" "James Newell" "software"
.SH "NAME"
cd Extension for UNIX (bash, csh, ksh, sh, tcsh) shell

.SH "Legend:"
.IP "" 0
[]   optional parameter(s)
.IP "" 0
()   required parameter(s)
.IP "" 0
|    or
.IP "" 0
<>   required variable name

.SH "SYNTAX"

.SS "cd [ <path> ] | [ to <short name> | <entry #> [<path>] ] | [ - [ # ] ]"
.IP "" 0
no parms               Return to user's home directory.
.IP "" 0
<path>                 Valid unix path.
.IP "" 0
..[...]                Traverse parent directories .
.IP "" 0
to <short name>        Change directory to the path the short name is associated.
.IP "" 0
to <short name> <path> Change directory to the path the short name is associated with and then cd to the specified unix path.
.IP "" 0
to <entry #>           Change directory to the path associated with the directory entry #.
.IP "" 0
\-                      Return to the previous directory.
.IP "" 0
\- #                    Return to the directory specified on the stack.

.SS "delete|cd.d*elete [ ALL ] |[ <short name> | # | #-# [, <short name> | # | #-# [ , ... ] ]"
.IP "" 0
ALL           Delete "all" cd list entries.
.IP "" 0
<short name>  Delete cd list entry with short name of <short name>.
.IP "" 0
#             Delete cd list entry by associated number.
.IP "" 0
#\-#           Delete range from <number> to <number>.
.IP "" 0

.SS "save|cd.s*ave [as <short name> [to [user] <path/username>] [absolute | logical]] | [<path> as <short name>]"
.IP "" 0
no parms             Save current working directory as "_".
.IP "" 0
as <short name>      Save current working directory as the short name variable.
.IP "" 0
as <short name> to <path/username> | as <short name> to user <path/username> 
.RS 5
Save specific path as to the specified shortname for another user account.
.RE
.IP "" 0
<path> as <short name>  Save path name variable as a short name variable.
.IP "" 0
absolute | logical      Use logical or absolute path name of the current working directory for saving.

.SS "list|cd.l*ist [ [ stack ] | [ by name ] ]"
.IP "" 0
no parms  Print to stdout a listing of the cd entries.
.IP "" 0
stack     Print to stdout a listing of the stack entries.
.IP "" 0
by name   Pint to stdout a listing of the cd entries in aplhabetic order ( note : listing is saved ).

.SS "setcd|cd.s*et [ all ] | [ user to ( <user name> | home ) ] | [ stack style <dest[ructive] | nond[estructive]> ] |[ stack size <#> ] | [ path format <absolute|logical> ]"
.IP "" 0
no parms 
same as setcd all
.IP "" 0
all
.RS 5
Set all the cd short names in the current running environment.
.RE
.IP "" 0
user to <path/username>
.RS 5
Set home directory to the user name
.IP \(bu 4
Provide access to other user's cd database (.DIR_LIST.INI).
.IP \(bu 4
The <path/username> is the location of the .DIR_LIST.INI file.
.IP \(bu 4
The cd <return> returns to the new user's home directory.
.RE
.IP "" 0
user to home
.RS 5
Set home directory back to the original user's $CD_HOME.
.IP \(bu 4
The environment variable set at initialization.
.RE
.IP "" 0
stack style <dest[ructive] | nond[estructive]>
.RS 5
.IP \(bu 4
A destructive stack pops the number of paths of the stack.
.IP \(bu 4
A nondestructive stack traverses the stack in read\-only mode.
.RE
.IP "" 0
stack size <#>
.RS 5
Set the maximum size of the stack. The maximum limit is 35 and minimum stack size is 1
.RE
.IP "" 0
path format <absolute|logical>
.RS 5
Save the logical or absolute path name of the current working directory.
.RE
.SH "SUMMARY"
.IP "" 0
cd            [ <path> ] | [ to <short name> [<path>] ] | [ \- [ # ] ]
.IP "" 0
[cd.]d*elete  [ ALL ] | [ <short name> | # | #\-# [, <short name> | # | #\-# [ , ... ] ]
.IP "" 0
[cd.]s*ave    [ as <short name> [ to [ user ] <path/username> ] ] | [ <path> as <short name> ]
.IP "" 0
[cd.]l*ist    [ [ stack ] | [ by name ] ]
.IP "" 0
[cd.]se*t{cd} [ all ] | [ user to ( <user name> | home ) ] | [ stack style <dest[ructive] | nond[estructive]> ] | [ stack size <#> ]

.SH "NOTES "
.IP \(bu 4
The cd is case sensitive.
.IP \(bu 4
Supports a maximum of \(100\) cd entries.
.IP \(bu 4
Environment variables are dynamic per shell.
.IP \(bu 4
If you save a path in one shell, you do not have access to the environment variable in another shell until you 'cd.set'. You do have immediate access to the path in the same shell via the cd command.
.IP \(bu 4
The stack is dynamic to each shell. Stack entries are private per shell.
.IP \(bu 4
The [cd.] aliases are available to all shells expect the Bourne Shell(sh).
.IP \(bu 4
The [cd.] aliases provide short cut completion:  e.g The [cd.]l*ist command can be execute as follows: (cd.list, cd.lis, cd.li, and cd.l).

.SH BUGS
No Known  bugs.

.SH AUTHOR
James Newell (jnewell@newells.info)